import { a as notImplementedClass, w as writevSync, b as writev, d as writeSync, e as writeFileSync, f as writeFile, g as write, h as watchFile, i as watch, u as utimesSync, j as utimes, k as unwatchFile, l as unlinkSync, m as unlink, t as truncateSync, o as truncate, p as symlinkSync, q as symlink, v as statfsSync, x as statfs, y as statSync, z as stat, A as rmdirSync, B as rmdir, D as rmSync, E as rm, F as renameSync, G as rename, H as realpathSync, I as realpath, J as readvSync, K as readv, L as readlinkSync, M as readlink, N as readdirSync, O as readdir, P as readSync, r as readFileSync, Q as readFile, R as read, S as opendirSync, T as opendir, U as openSync, V as openAsBlob, W as open, X as mkdtempSync, Y as mkdtemp, Z as mkdirSync, _ as mkdir, $ as lutimesSync, a0 as lutimes, a1 as lstatSync, a2 as lstat, a3 as linkSync, a4 as link, a5 as lchownSync, a6 as lchown, a7 as lchmodSync, a8 as globSync, a9 as lchmod, aa as glob, ab as futimesSync, ac as futimes, ad as ftruncateSync, ae as ftruncate, af as fsyncSync, ag as fsync, ah as fstatSync, ai as fstat, aj as fdatasyncSync, ak as fdatasync, al as fchownSync, am as fchown, an as fchmodSync, ao as fchmod, ap as existsSync, aq as exists, ar as createWriteStream, as as createReadStream, at as cpSync, au as cp, av as copyFileSync, aw as copyFile, ax as closeSync, ay as close, az as chownSync, aA as chown, aB as chmodSync, aC as chmod, aD as appendFileSync, aE as appendFile, aF as accessSync, aG as access, aH as _toUnixTimestamp, aI as fsPromises, aJ as constants, aK as X_OK, aL as W_OK, aM as R_OK, aN as F_OK } from "../index.js";
const Dir = /* @__PURE__ */ notImplementedClass("fs.Dir");
const Dirent = /* @__PURE__ */ notImplementedClass("fs.Dirent");
const Stats = /* @__PURE__ */ notImplementedClass("fs.Stats");
const ReadStream = /* @__PURE__ */ notImplementedClass("fs.ReadStream");
const WriteStream = /* @__PURE__ */ notImplementedClass("fs.WriteStream");
const FileReadStream = ReadStream;
const FileWriteStream = WriteStream;
const fs = {
  F_OK,
  R_OK,
  W_OK,
  X_OK,
  constants,
  promises: fsPromises,
  Dir,
  Dirent,
  FileReadStream,
  FileWriteStream,
  ReadStream,
  Stats,
  WriteStream,
  _toUnixTimestamp,
  access,
  accessSync,
  appendFile,
  appendFileSync,
  chmod,
  chmodSync,
  chown,
  chownSync,
  close,
  closeSync,
  copyFile,
  copyFileSync,
  cp,
  cpSync,
  createReadStream,
  createWriteStream,
  exists,
  existsSync,
  fchmod,
  fchmodSync,
  fchown,
  fchownSync,
  fdatasync,
  fdatasyncSync,
  fstat,
  fstatSync,
  fsync,
  fsyncSync,
  ftruncate,
  ftruncateSync,
  futimes,
  futimesSync,
  glob,
  lchmod,
  globSync,
  lchmodSync,
  lchown,
  lchownSync,
  link,
  linkSync,
  lstat,
  lstatSync,
  lutimes,
  lutimesSync,
  mkdir,
  mkdirSync,
  mkdtemp,
  mkdtempSync,
  open,
  openAsBlob,
  openSync,
  opendir,
  opendirSync,
  read,
  readFile,
  readFileSync,
  readSync,
  readdir,
  readdirSync,
  readlink,
  readlinkSync,
  readv,
  readvSync,
  realpath,
  realpathSync,
  rename,
  renameSync,
  rm,
  rmSync,
  rmdir,
  rmdirSync,
  stat,
  statSync,
  statfs,
  statfsSync,
  symlink,
  symlinkSync,
  truncate,
  truncateSync,
  unlink,
  unlinkSync,
  unwatchFile,
  utimes,
  utimesSync,
  watch,
  watchFile,
  write,
  writeFile,
  writeFileSync,
  writeSync,
  writev,
  writevSync
};
const fs$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  Dir,
  Dirent,
  F_OK,
  FileReadStream,
  FileWriteStream,
  R_OK,
  ReadStream,
  Stats,
  W_OK,
  WriteStream,
  X_OK,
  _toUnixTimestamp,
  access,
  accessSync,
  appendFile,
  appendFileSync,
  chmod,
  chmodSync,
  chown,
  chownSync,
  close,
  closeSync,
  constants,
  copyFile,
  copyFileSync,
  cp,
  cpSync,
  createReadStream,
  createWriteStream,
  default: fs,
  exists,
  existsSync,
  fchmod,
  fchmodSync,
  fchown,
  fchownSync,
  fdatasync,
  fdatasyncSync,
  fstat,
  fstatSync,
  fsync,
  fsyncSync,
  ftruncate,
  ftruncateSync,
  futimes,
  futimesSync,
  glob,
  globSync,
  lchmod,
  lchmodSync,
  lchown,
  lchownSync,
  link,
  linkSync,
  lstat,
  lstatSync,
  lutimes,
  lutimesSync,
  mkdir,
  mkdirSync,
  mkdtemp,
  mkdtempSync,
  open,
  openAsBlob,
  openSync,
  opendir,
  opendirSync,
  promises: fsPromises,
  read,
  readFile,
  readFileSync,
  readSync,
  readdir,
  readdirSync,
  readlink,
  readlinkSync,
  readv,
  readvSync,
  realpath,
  realpathSync,
  rename,
  renameSync,
  rm,
  rmSync,
  rmdir,
  rmdirSync,
  stat,
  statSync,
  statfs,
  statfsSync,
  symlink,
  symlinkSync,
  truncate,
  truncateSync,
  unlink,
  unlinkSync,
  unwatchFile,
  utimes,
  utimesSync,
  watch,
  watchFile,
  write,
  writeFile,
  writeFileSync,
  writeSync,
  writev,
  writevSync
}, Symbol.toStringTag, { value: "Module" }));
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function getDefaultExportFromCjs(x) {
  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
}
function getAugmentedNamespace(n) {
  if (Object.prototype.hasOwnProperty.call(n, "__esModule")) return n;
  var f = n.default;
  if (typeof f == "function") {
    var a = function a2() {
      if (this instanceof a2) {
        return Reflect.construct(f, arguments, this.constructor);
      }
      return f.apply(this, arguments);
    };
    a.prototype = f.prototype;
  } else a = {};
  Object.defineProperty(a, "__esModule", { value: true });
  Object.keys(n).forEach(function(k) {
    var d = Object.getOwnPropertyDescriptor(n, k);
    Object.defineProperty(a, k, d.get ? d : {
      enumerable: true,
      get: function() {
        return n[k];
      }
    });
  });
  return a;
}
const require$$0 = /* @__PURE__ */ getAugmentedNamespace(fs$1);
export {
  getAugmentedNamespace as a,
  commonjsGlobal as c,
  getDefaultExportFromCjs as g,
  require$$0 as r
};
